{"version":3,"sources":["App.js","index.js"],"names":["App","useState","isModelLoading","setIsModelLoading","model","setModel","imageURL","setImageURL","results","setResults","history","setHistory","imageRef","useRef","textInputRef","fileInputRef","loadModel","a","mobilenet","console","log","identify","current","value","classify","useEffect","className","href","target","type","accept","capture","onChange","e","files","length","url","URL","createObjectURL","ref","onClick","click","placeholder","src","alt","crossOrigin","map","result","index","probability","toFixed","image","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wUAkHeA,MA7Gf,WACI,MAA4CC,oBAAS,GAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAA0BF,mBAAS,MAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAgCJ,mBAAS,MAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KACA,EAA8BN,mBAAS,IAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KACA,EAA8BR,mBAAS,IAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KAEMC,EAAWC,mBACXC,EAAeD,mBACfE,EAAeF,mBAEfG,EAAS,uCAAG,4BAAAC,EAAA,6DACdd,GAAkB,GADJ,kBAGUe,MAHV,OAGJd,EAHI,OAIVC,EAASD,GACTD,GAAkB,GALR,gDAOVgB,QAAQC,IAAR,MACAjB,GAAkB,GARR,yDAAH,qDAsBTkB,EAAQ,uCAAG,4BAAAJ,EAAA,6DACbH,EAAaQ,QAAQC,MAAQ,GADhB,SAESnB,EAAMoB,SAASZ,EAASU,SAFjC,OAEPd,EAFO,OAGbC,EAAWD,GAHE,2CAAH,qDAyBd,OAVAiB,qBAAU,WACNT,MACD,IAEHS,qBAAU,WACFnB,GACAK,EAAW,CAACL,GAAF,mBAAeI,OAE9B,CAACJ,IAEAJ,EACO,kDAIP,sBAAKwB,UAAU,MAAf,UACI,oBAAIA,UAAU,SAAd,yCACA,8BACI,qBAAIA,UAAU,aAAd,4CAA0D,mBAAGC,KAAK,yEAAyEC,OAAO,SAAxF,2BAE9D,sBAAKF,UAAU,cAAf,UACI,uBAAOG,KAAK,OAAOC,OAAO,UAAUC,QAAQ,SAASL,UAAU,cAAcM,SA9CrE,SAACC,GACjB,IAAQC,EAAUD,EAAEL,OAAZM,MACR,GAAIA,EAAMC,OAAS,EAAG,CAClB,IAAMC,EAAMC,IAAIC,gBAAgBJ,EAAM,IACtC3B,EAAY6B,QAEZ7B,EAAY,OAwC4FgC,IAAKxB,IACzG,wBAAQW,UAAU,cAAcc,QA1BtB,WAClBzB,EAAaO,QAAQmB,SAyBb,0BACA,sBAAMf,UAAU,KAAhB,gBACA,uBAAOG,KAAK,OAAOa,YAAY,iBAAiBH,IAAKzB,EAAckB,SAjCxD,SAACC,GACpB1B,EAAY0B,EAAEL,OAAOL,OACrBd,EAAW,UAiCP,sBAAKiB,UAAU,cAAf,UACI,sBAAKA,UAAU,cAAf,UACI,qBAAKA,UAAU,cAAf,SACKpB,GAAY,qBAAKqC,IAAKrC,EAAUsC,IAAI,iBAAiBC,YAAY,YAAYN,IAAK3B,MAEtFJ,EAAQ2B,OAAS,GAAK,qBAAKT,UAAU,gBAAf,SAClBlB,EAAQsC,KAAI,SAACC,EAAQC,GAClB,OACI,sBAAKtB,UAAU,SAAf,UACI,sBAAMA,UAAU,OAAhB,SAAwBqB,EAAOrB,YAC/B,uBAAMA,UAAU,aAAhB,gCAAsE,IAArBqB,EAAOE,aAAmBC,QAAQ,GAAnF,KAAmG,IAAVF,GAAe,sBAAMtB,UAAU,YAAhB,6BAF/EqB,EAAOrB,mBAQnDpB,GAAY,wBAAQoB,UAAU,SAASc,QAASnB,EAApC,+BAEhBX,EAAQyB,OAAS,GAAK,sBAAKT,UAAU,oBAAf,UACnB,+CACA,qBAAKA,UAAU,eAAf,SACKhB,EAAQoC,KAAI,SAACK,EAAOH,GACjB,OACI,qBAAKtB,UAAU,mBAAf,SACI,qBAAKiB,IAAKQ,EAAOP,IAAI,oBAAoBJ,QAAS,kBAAMjC,EAAY4C,OADxE,UAA0CA,GAA1C,OAAkDH,gBCjG9EI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.59470476.chunk.js","sourcesContent":["// shahid akhtar\nimport { useState, useEffect, useRef } from 'react';\nimport * as mobilenet from \"@tensorflow-models/mobilenet\";\n\n\nfunction App() {\n    const [isModelLoading, setIsModelLoading] = useState(false)\n    const [model, setModel] = useState(null)\n    const [imageURL, setImageURL] = useState(null);\n    const [results, setResults] = useState([])\n    const [history, setHistory] = useState([])\n\n    const imageRef = useRef()\n    const textInputRef = useRef()\n    const fileInputRef = useRef()\n\n    const loadModel = async () => {\n        setIsModelLoading(true)\n        try {\n            const model = await mobilenet.load()\n            setModel(model)\n            setIsModelLoading(false)\n        } catch (error) {\n            console.log(error)\n            setIsModelLoading(false)\n        }\n    }\n\n    const uploadImage = (e) => {\n        const { files } = e.target\n        if (files.length > 0) {\n            const url = URL.createObjectURL(files[0])\n            setImageURL(url)\n        } else {\n            setImageURL(null)\n        }\n    }\n\n    const identify = async () => {\n        textInputRef.current.value = ''\n        const results = await model.classify(imageRef.current)\n        setResults(results)\n    }\n\n    const handleOnChange = (e) => {\n        setImageURL(e.target.value)\n        setResults([])\n    }\n\n    const triggerUpload = () => {\n        fileInputRef.current.click()\n    }\n\n    useEffect(() => {\n        loadModel()\n    }, [])\n\n    useEffect(() => {\n        if (imageURL) {\n            setHistory([imageURL, ...history])\n        }\n    }, [imageURL])\n\n    if (isModelLoading) {\n        return <h2>Model Loading...</h2>\n    }\n\n    return (\n        <div className=\"App\">\n            <h1 className='header'>Image Recognition React App</h1>\n            <div>\n                <h3 className='sub-header'> *Supports Image classes from: <a href=\"https://deeplearning.cms.waikato.ac.nz/user-guide/class-maps/IMAGENET/\" target=\"_blank\">ImageNet</a></h3>\n            </div>\n            <div className='inputHolder'>\n                <input type='file' accept='image/*' capture='camera' className='uploadInput' onChange={uploadImage} ref={fileInputRef} />\n                <button className='uploadImage' onClick={triggerUpload}>Upload Image</button>\n                <span className='or'>OR</span>\n                <input type=\"text\" placeholder='Past image URL' ref={textInputRef} onChange={handleOnChange} />\n            </div>\n            <div className=\"mainWrapper\">\n                <div className=\"mainContent\">\n                    <div className=\"imageHolder\">\n                        {imageURL && <img src={imageURL} alt=\"Upload Preview\" crossOrigin=\"anonymous\" ref={imageRef} />}\n                    </div>\n                    {results.length > 0 && <div className='resultsHolder'>\n                        {results.map((result, index) => {\n                            return (\n                                <div className='result' key={result.className}>\n                                    <span className='name'>{result.className}</span>\n                                    <span className='confidence'>Confidence level: {(result.probability * 100).toFixed(2)}% {index === 0 && <span className='bestGuess'>Best Guess</span>}</span>\n                                </div>\n                            )\n                        })}\n                    </div>}\n                </div>\n                {imageURL && <button className='button' onClick={identify}>Identify Image</button>}\n            </div>\n            {history.length > 0 && <div className=\"recentPredictions\">\n                <h2>Recent Images</h2>\n                <div className=\"recentImages\">\n                    {history.map((image, index) => {\n                        return (\n                            <div className=\"recentPrediction\" key={`${image}${index}`}>\n                                <img src={image} alt='Recent Prediction' onClick={() => setImageURL(image)} />\n                            </div>\n                        )\n                    })}\n                </div>\n            </div>}\n            \n        </div>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}